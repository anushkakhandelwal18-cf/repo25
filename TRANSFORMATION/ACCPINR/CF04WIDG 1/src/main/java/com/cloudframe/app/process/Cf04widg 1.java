  package com.cloudframe.app.process;
  /* Java code generated by CloudFrame on 2024-11-14 at 17:20. */
  
  import org.springframework.web.bind.annotation.PostMapping;
  import org.springframework.web.bind.annotation.RequestBody;
  import org.springframework.http.MediaType;
  import org.springframework.http.ResponseEntity;
  import org.slf4j.Logger;
  import org.slf4j.LoggerFactory;
  import com.cloudframe.app.exception.CFException;
  import org.springframework.stereotype.Component;
  import org.springframework.web.bind.annotation.RestController;
  import org.springframework.web.bind.annotation.RequestParam;
  import com.cloudframe.app.exception.Terminate;
  import org.springframework.beans.factory.annotation.Autowired;
  import org.springframework.beans.factory.annotation.Qualifier;
  import com.cloudframe.app.repository.Cf04widg 1Repository;
  import com.cloudframe.app.utility.CFUtil;
  import java.math.BigDecimal;
  import java.util.ArrayList;
  import com.cloudframe.app.data.Field;
  import java.util.Map;
  import java.util.HashMap;
  import com.cloudframe.app.cf04widg 1.dto.*;
  import com.cloudframe.app.cf04widg 1.dto.Dfheiblk;
  import com.cloudframe.app.cf04widg 1.dto.Dfhcommarea;
  import com.cloudframe.app.cf04widg 1.dto.Sqlca;
  import com.cloudframe.app.cf04widg 1.dto.Tbxmlwgt;
  import com.cloudframe.app.cf04widg 1.dto.Work;
  import com.cloudframe.app.common.CONSTANTS;
  import com.cloudframe.app.common.SQLS;
  import com.cloudframe.app.cics.TransactionManager;
  import org.springframework.beans.factory.annotation.Value;
  import com.cloudframe.app.dao.Db2Base;
  import java.sql.SQLException;
  
  @Component("cf04widg 1")
  
  public class Cf04widg 1 extends BaseProcess {
  
  Logger logger = LoggerFactory.getLogger(Cf04widg 1.class);
  
  private Dfheiblk dfheiblk = new Dfheiblk() ;
  private Dfhcommarea dfhcommarea = new Dfhcommarea() ;
  private Sqlca sqlca = new Sqlca() ;
  private Tbxmlwgt tbxmlwgt = new Tbxmlwgt() ;
  private Work work = new Work() ;
  
  @Value("${CF04WIDG 1.dbQualifier:}")
  private String dbQualifier;
  
  
  @Autowired 
  @Qualifier("db2Base")
  Db2Base db2Base;
  @Autowired 
  @Qualifier("cf04widg 1Repository")
  Cf04widg 1Repository cf04widg 1Repository;
  
  
  
  
  
  
        public com.cloudframe.app.cf04widg 1.rest.Dfhcommarea setCommarea(com.cloudframe.app.cf04widg 1.rest.Dfhcommarea inputCommarea) throws Exception {
      		
      		inputCommarea.setDfhcommarea(dfhcommarea);
      		setInitDone(false);
      		try {
      			process();
      		}
      		catch(Exception e) { 
      		  	handleExceptionForRest(e);
      		} finally {
      			clearVars(); 
      		}
      		inputCommarea.populateFrom(dfhcommarea);
      		return inputCommarea;
      }
      /**
      * process 
      * Input  : None 

      * Output : None 

      * @throws CFException
      */
      @Override
      public int process() throws Exception {
       initVars();
       try {
       setCodePage("1047");
          ;
//  cobolCode::PERFORM 0000-MAINLINE
//  PERFORM 0000-MAINLINE
          mainline();/*0000-MAINLINE*/
       } catch(Exception e) {
            handleErrorCode(e);
            throw e;
       }
        finally {
      // #DatabaseUsed
      }
      
       return getRc(); // Exit with return code
      // end of process method
      }
      /**
      * mainline 
      *   This method is derived from 
  *   COBOL Paragraph - 0000-MAINLINE COBOL Cyclomatic complexity - 1
      * Input  : None 

      * Output : None 

      * @throws CFException
      */
      private void mainline() throws Exception {
//  cobolCode::PERFORM 1000-GET-WIDGET THRU 1000-EXIT
//  PERFORM 1000-GET-WIDGET THRU 1000-EXIT
          getWidget();/*1000-GET-WIDGET*/
//  cobolCode::GOBACK
//  GOBACK
          throw Terminate.TERMINATE;
      
      }
      /**
      * getWidget 
      *   This method is derived from 
  *   COBOL Paragraph - 1000-GET-WIDGET COBOL Cyclomatic complexity - 6
      * Input  :  

      * - widgetNum01                    COBOL Name: LK-WIDGET-NUM
      * - sqlcode                        COBOL Name: SQLCODE
      * - widgetColor                    COBOL Name: WIDGET-COLOR
      * - widgetSize                     COBOL Name: WIDGET-SIZE
      * - widgetPrice                    COBOL Name: WIDGET-PRICE
      * - widgetSupplier                 COBOL Name: WIDGET-SUPPLIER
      * - widgetDesc                     COBOL Name: WIDGET-DESC
      * - widgetManuPlant                COBOL Name: WIDGET-MANU-PLANT
      * - widgetManuCost                 COBOL Name: WIDGET-MANU-COST
      * - widgetLeadTime                 COBOL Name: WIDGET-LEAD-TIME
      *
      * Output :  

      * - widgetNum                      COBOL Name: WIDGET-NUM
      * - widgetNum01                    COBOL Name: LK-WIDGET-NUM
      * - sqlcode_Ws                     COBOL Name: WS-SQLCODE
      * - sqlcode                        COBOL Name: SQLCODE
      * - widgetColor01                  COBOL Name: LK-WIDGET-COLOR
      * - widgetColor                    COBOL Name: WIDGET-COLOR
      * - widgetSize01                   COBOL Name: LK-WIDGET-SIZE
      * - widgetSize                     COBOL Name: WIDGET-SIZE
      * - widgetPrice01                  COBOL Name: LK-WIDGET-PRICE
      * - widgetPrice                    COBOL Name: WIDGET-PRICE
      * - widgetSupplier01               COBOL Name: LK-WIDGET-SUPPLIER
      * - widgetSupplier                 COBOL Name: WIDGET-SUPPLIER
      * - widgetDesc01                   COBOL Name: LK-WIDGET-DESC
      * - widgetDesc                     COBOL Name: WIDGET-DESC
      * - widgetManuPlant01              COBOL Name: LK-WIDGET-MANU-PLANT
      * - widgetManuPlant                COBOL Name: WIDGET-MANU-PLANT
      * - widgetManuCost01               COBOL Name: LK-WIDGET-MANU-COST
      * - widgetManuCost                 COBOL Name: WIDGET-MANU-COST
      * - widgetLeadTime01               COBOL Name: LK-WIDGET-LEAD-TIME
      * - widgetLeadTime                 COBOL Name: WIDGET-LEAD-TIME
      * - widgetErrorMsg                 COBOL Name: LK-WIDGET-ERROR-MSG
      *
      * @throws CFException
      */
      private void getWidget() throws Exception {
			// Declare local variables used in the method
			ArrayList<char[]> charArray = new ArrayList<char[]>();
			char[] joinCharArray = null;
			Map<String,Object> updated = null;
			// End of variable declaration

      
// *
//  cobolCode::MOVE LK-WIDGET-NUM TO WIDGET-NUM
//  MOVE LK-WIDGET-NUM TO WIDGET-NUM
          tbxmlwgt.setWidgetNum(dfhcommarea.getWidgetNum01());
//  cobolCode::SELECT WIDGET_COLOR , WIDGET_SIZE , WIDGET_PRICE , WIDGET_SUPPLIER , WIDGET_DESC , WIDGET_MANU_PLANT , WIDGET_MANU_COST , WIDGET_LEAD_TIME FROM TBWIDGET WHERE WIDGET_NUM = ?
//  SELECT WIDGET_COLOR , WIDGET_SIZE , WIDGET_PRICE , WIDGET_SUPPLIER , WIDGET_DESC , WIDGET_MANU_PLANT , WIDGET_MANU_COST , WIDGET_LEAD_TIME FROM TBWIDGET WHERE WIDGET_NUM = ?
          cf04widg 1Repository.selectTbwidget(sqlca,tbxmlwgt);
          // MOVE SQLCODE TO WS-SQLCODE
          //  FORMAT1016334848 = "----"
          work.setSqlcode_Ws(CFUtil.cobolNumberFormatter(CONSTANTS.FORMAT1016334848,String.valueOf(sqlca.getSqlcode()).toCharArray()));
//  cobolCode::EVALUATE SQLCODE
//  EVALUATE SQLCODE
          switch(sqlca.getSqlcode()){
          	case 0:
//  cobolCode::MOVE WIDGET-COLOR TO LK-WIDGET-COLOR
//  MOVE WIDGET-COLOR TO LK-WIDGET-COLOR
              dfhcommarea.setWidgetColor01(tbxmlwgt.getWidgetColor());
//  cobolCode::MOVE WIDGET-SIZE TO LK-WIDGET-SIZE
//  MOVE WIDGET-SIZE TO LK-WIDGET-SIZE
              dfhcommarea.setWidgetSize01(tbxmlwgt.getWidgetSize());
//  cobolCode::MOVE WIDGET-PRICE TO LK-WIDGET-PRICE
//  MOVE WIDGET-PRICE TO LK-WIDGET-PRICE
//  FORMAT_1287115115 = "ZZZZ9.99"
              dfhcommarea.setWidgetPrice01(CFUtil.cobolNumberFormatter(CONSTANTS.FORMAT_1287115115,tbxmlwgt.getWidgetPrice().toPlainString().toCharArray()));
//  cobolCode::MOVE WIDGET-SUPPLIER TO LK-WIDGET-SUPPLIER
//  MOVE WIDGET-SUPPLIER TO LK-WIDGET-SUPPLIER
              dfhcommarea.setWidgetSupplier01(tbxmlwgt.getWidgetSupplier());
//  cobolCode::MOVE WIDGET-DESC TO LK-WIDGET-DESC
//  MOVE WIDGET-DESC TO LK-WIDGET-DESC
              dfhcommarea.setWidgetDesc01(tbxmlwgt.getWidgetDesc());
//  cobolCode::MOVE WIDGET-MANU-PLANT TO LK-WIDGET-MANU-PLANT
//  MOVE WIDGET-MANU-PLANT TO LK-WIDGET-MANU-PLANT
              dfhcommarea.setWidgetManuPlant01(tbxmlwgt.getWidgetManuPlant());
//  cobolCode::MOVE WIDGET-MANU-COST TO LK-WIDGET-MANU-COST
//  MOVE WIDGET-MANU-COST TO LK-WIDGET-MANU-COST
//  FORMAT_1287115115 = "ZZZZ9.99"
              dfhcommarea.setWidgetManuCost01(CFUtil.cobolNumberFormatter(CONSTANTS.FORMAT_1287115115,tbxmlwgt.getWidgetManuCost().toPlainString().toCharArray()));
//  cobolCode::MOVE WIDGET-LEAD-TIME TO LK-WIDGET-LEAD-TIME
//  MOVE WIDGET-LEAD-TIME TO LK-WIDGET-LEAD-TIME
//  FORMAT_1059277505 = "ZZZ9"
              dfhcommarea.setWidgetLeadTime01(CFUtil.cobolNumberFormatter(CONSTANTS.FORMAT_1059277505,String.valueOf(tbxmlwgt.getWidgetLeadTime()).toCharArray()));
//  cobolCode::MOVE ALL '*' TO LK-WIDGET-ERROR-MSG
//  MOVE ALL '*' TO LK-WIDGET-ERROR-MSG
              dfhcommarea.setWidgetErrorMsg(CONSTANTS.LITERAL_1118165632);
          break;
          	case 100:
//  cobolCode::MOVE 'WIDGET Not found !!' TO LK-WIDGET-ERROR-MSG
//  MOVE 'WIDGET Not found !!' TO LK-WIDGET-ERROR-MSG
              dfhcommarea.setWidgetErrorMsg(CONSTANTS.LITERAL_375072441);
          break;
          default :
//  cobolCode::MOVE SPACES TO LK-WIDGET-ERROR-MSG
//  MOVE SPACES TO LK-WIDGET-ERROR-MSG
              dfhcommarea.setWidgetErrorMsg(CONSTANTS.SPACE_50);
//  cobolCode::STRING 'WIDGET lookup failed : sqlcode = ' WS-SQLCODE DELIMITED BY SIZE INTO LK-WIDGET-ERROR-MSG END-STRING
//  STRING 'WIDGET lookup failed : sqlcode = ' WS-SQLCODE DELIMITED BY SIZE INTO LK-WIDGET-ERROR-MSG END-STRING
              charArray = new ArrayList<char[]>();
                 charArray.add(CONSTANTS.LITERAL_1548266813);
                 charArray.add(work.getSqlcode_Ws());
              joinCharArray = Field.mergeArrays(charArray.get(0),charArray.get(1));
              updated = updateString(dfhcommarea.getWidgetErrorMsg() ,joinCharArray);
              dfhcommarea.setWidgetErrorMsg(  (char[])updated.get("string"));
          }
      
      }
  
  
      /**
* This method pre-initializes variables consistent with
* what a mainframe program would have done at the start of a program
*/
      @Override
      public void initVars() throws CFException {
      setProgramEnded(false);
      	if (getCICSSession() == null)
          setCICSSession(TransactionManager.getSession());
          db2Base.reset("CF04WIDG 1" ,dbQualifier, true/*use Dynamic SQL*/);
          if(!isInitDone()) {
          	this.setRc(0);
          	setInitDone(true);
          }
        CFUtil.resetDecimalAsComma();
       }
  
      public int call(Object[] params) throws Exception {
      
      int len = params.length;
         if (len > 1 && params[1] != null )
            dfhcommarea.set((Field)params[1]);
         // invoke the process and return rc
         return process();
         
      }
      
      public int call(Field... parameters) throws Exception {
         for (int index = 0; index < parameters.length;index++) {
             switch(index) {
              case 1:
                      if(parameters[index] != null ) {
              		if (parameters[index] instanceof Dfhcommarea) {
                       	this.dfhcommarea = ((Dfhcommarea) parameters[index]);
                  	} else {
                       	this.dfhcommarea.set(parameters[index]);
                  	}
                  }
                
                  break;
            }
         }
          return process();
      }
      
      
  
  
  
  
  
  }
